rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function userHasPermission() {
      return request.time < timestamp.date(2024, 5, 6);
    }

    match /suppliers/{supplier} {
      allow read: if userHasPermission();

      allow create: if userHasPermission() &&
        request.resource.data.size() == 3 &&
        request.resource.data.hasAll(['supplier_name', 'email_address', 'phone_number']) &&
        request.resource.data.supplier_name is string &&
        request.resource.data.email_address is string &&
        request.resource.data.phone_number is string;
    }

    match /products/{product} {
      allow read: if userHasPermission();

      allow create: if userHasPermission() &&
        request.resource.data.size() == 5 &&
        request.resource.data.hasAll(['product_name', 'minimum_quantity', 'quantity', 'maximum_quantity', 'supplier_id']) &&
        request.resource.data.product_name is string &&
        request.resource.data.minimum_quantity is int &&
        request.resource.data.quantity is int &&
        request.resource.data.maximum_quantity is int &&
        request.resource.data.supplier_id is string &&
        // Ensure that the supplier_id exists in the suppliers collection.
        exists(/databases/$(database)/documents/suppliers/$(request.resource.data.supplier_id)) &&
        request.resource.data.minimum_quantity >= 0 &&
        request.resource.data.quantity >= 0 &&
        request.resource.data.maximum_quantity >= 0 &&
        request.resource.data.minimum_quantity < request.resource.data.maximum_quantity;

      allow update: if userHasPermission() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['quantity']) &&
        request.resource.data.quantity is int &&
        request.resource.data.quantity >= 0;
    }

    match /orders/{order} {
      allow read: if userHasPermission();

      allow create: if userHasPermission() &&
        // Ensure that the value for order_date came from a server-side timestamp.
        request.time == request.resource.data.order_date &&
        // Ensure that the supplier in the request already exists in this database.
        exists(/databases/$(database)/documents/suppliers/$(request.resource.data.supplier_id));
        // TODO: Ensure that each of the products in the request already exists in this database.
        // TODO: Ensure that the quantity for each product is greater than zero.
    }

    match /users/{users} {
      allow read: if userHasPermission();

      allow write: if userHasPermission() &&
        request.resource.data.size() == 2 &&
        request.resource.data.hasAll(['email', 'enabled']) &&
        request.resource.data.email is string &&
        request.resource.data.enabled is bool;
    }
  }
}
